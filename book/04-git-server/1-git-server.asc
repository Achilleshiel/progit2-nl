////
 Attentie heren en dames vertalers.

 Ik zou het volgende willen voorstellen:
 Er zijn bepaalde termen die voor de gemiddelde Nederlandse computergebruiker
 veel beter klinken (of bekender voorkomen) dan de orginele Engelse term. In het
 begin zullen deze termen niet vaak voorkomen, maar in de meer diepgaandere
 hoofdstukken komen deze steeds meer voor. Termen als "Committen", "Mergen"
 en "Applyen" klinken beter dan "Plegen" of "Toepassen", "Samenvoegen" en
 "Toepassen" (wat bovendien slecht valt te onderscheiden van de commit-toepassing).
 De mensen die dit boek lezen zijn, naar mijn bescheiden
 inschatting, al redelijk op de hoogte van versiebeheer en passen (zie ik in
 de praktijk) deze termen al toe. Een nieuwe terminologie introduceren lijkt
 me dan ook niet noodzakelijk.
 Verder blijven er altijd kreten over als "directory", wat vertaald zou kunnen
 worden als "map", maar bij het Engelse werkwoord to map krijgen we dan weer het
 probleem: hoe dit weer te vertalen? Daarom zou ik willen voorstellen om deze
 basis-termen toch onvertaald te laten.

 Twijfelgevallen zullen altijd blijven zoals de term "file", daarvan wordt in de
 praktijk zowel de term file als bestand gebruikt. Ik denk dat we hier moeten
 kijken hoe het in de context past. De term "client" heb ik, lettend op de context
 vaak vertaald met "werkstation".
 Termen als als "tool" en (ik zit zelf nog op een mooie Nederlandse term
 te broeden) "plumbing" zijn een iets grotere uitdaging, hierbij stel ik voor om
 eenmalig een Nederlandse vertaling te geven, tussen haakjes de Engelse term te
 geven en in het vervolg de Engelse term te gebruiken. Wederom is de context hier
 belangrijk.

 Verder stel ik ook voor om de regels op https://onzetaal.nl/taaladvies zoveel
 mogelijk te volgen. Bijvoorbeeld de regels omtrent het spellen van Engelse
 werkwoorden die in het Nederlands gebruikt worden.

 Let wel: ik wil niemand tot iets verplichten, maar ik denk dat we moeten
 streven naar een zo duidelijk mogelijke en best bij de praktijk aansluitende
 vertaling moeten proberen te maken.

Veel succes en plezier bij het vertalen...

Laatst bijgewerkt van progit/progit2 referentie: 6528f318
////
== Git op de server

(((serving repositories)))
Je zou nu de alledaagse taken waarvoor je Git zult gebruiken moeten kunnen uitvoeren.
Echter, om enige vorm van samenwerking te hebben in Git is een remote Git repository nodig.
Technisch gezien kun je wijzigingen pushen en pullen van individuele repositories, maar dat wordt afgeraden omdat je
  vrij gemakkelijk het werk waar anderen mee bezig zijn in de war kunt schoppen als je niet oppast.
Daarnaast wil je dat je medewerkers de repository kunnen bereiken, zelfs als jouw computer van het netwerk is; het
 hebben van een betrouwbare gezamenlijke repository is vaak handig.
De voorkeursmethode om met iemand samen te werken is daarom een tussenliggende repository in te richten waar alle
 partijen toegang tot hebben en om daar naartoe te pushen en vandaan te pullen.

Een Git server draaien is eenvoudig.
Als eerste kies je met welke protocollen je de server wilt laten communiceren.
In het eerste gedeelte van dit hoofdstuk zullen we de beschikbare protocollen bespreken met de voor- en nadelen van elk.
De daarop volgende paragrafen zullen we een aantal veel voorkomende opstellingen bespreken die van die protocollen
 gebruik maken en hoe je je server ermee kunt opzetten.
Als laatste laten we een paar servers van derden zien, als je het niet erg vindt om je code op de server van een
 ander te zetten en niet het gedoe wilt hebben van het opzetten en onderhouden van je eigen server.

Als je niet van plan bent om je eigen server te draaien, dan kun je de direct naar de laatste paragraaf van dit
 hoofdstuk gaan om wat mogelijkheden van online accounts te zien en dan door gaan naar het volgende hoofdstuk, waar
  we diverse zaken bespreken die komen kijken bij het werken met een gedistribueerde versiebeheer omgeving.

Een remote repository is over het algemeen een _bare repository_ (kale repository): een Git repository dat geen
 werkdirectory heeft.
Omdat de repository alleen gebruikt wordt als een samenwerkingspunt, is er geen reden om een snapshot op de schijf
 te hebben; het is alleen de Git data.
Een kale repository is eenvoudigweg de inhoud van de `.git` directory in je project, en niets meer.

include::sections/protocols.asc[]

include::sections/git-on-a-server.asc[]

include::sections/generating-ssh-key.asc[]

include::sections/setting-up-server.asc[]

include::sections/git-daemon.asc[]

include::sections/smart-http.asc[]

include::sections/gitweb.asc[]

include::sections/gitlab.asc[]

include::sections/hosted.asc[]

=== Samenvatting

Je hebt meerdere opties om een remote Git repository werkend te krijgen zodat je kunt samenwerken met anderen of je
 werk kunt delen.

Je eigen server draaien geeft je veel controle en stelt je in staat om de server binnen je firewall te draaien, maar
  zo'n server vraagt over het algemeen een redelijke hoeveelheid tijd om in te stellen en te onderhouden.
Als je je gegevens op een beheerde server plaatst, is het eenvoudig in te stellen en te onderhouden; maar je moet
 wel willen dat je code op de server van een derde opgeslagen is, en sommige organisaties staan dit niet toe.

Het zou redelijk eenvoudig moeten zijn om te bepalen welke oplossing of combinatie van oplossingen van toepassing is
 op jou en je organisatie.