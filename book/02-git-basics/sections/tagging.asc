[[_git_tagging]]
=== Taggen (Labelen)

(((tags)))
Zoals de meeste VCS'en, heeft Git de mogelijkheid om specifieke punten in de historie als belangrijk te taggen
 (labelen).
Over het algemeen gebruiken mensen deze functionaliteit om versie-punten te markeren (v1.0, en zo).
In deze paragraaf zul je leren hoe de beschikbare tags te tonen, hoe nieuwe tags te creëren, en wat de verschillende
  typen tags zijn.

==== Jouw tags laten zien

De beschikbare tags in Git laten zien is heel eenvoudig.
Type gewoon `git tag`:(((git commando's, tag)))

[source,console]
----
$ git tag
v0.1
v1.3
----

Dit commando toont de tags in alfabetische volgorde; de volgorde waarin ze verschijnen heeft geen echte betekenis.

Je kunt ook zoeken op tags met een bepaald patroon.
De Git bron-repository, bijvoorbeeld, bevat meer dan 500 tags.
Als je alleen geïnteresseerd bent om naar de 1.8.5 serie te kijken, kun je dit uitvoeren:

[source,console]
----
$ git tag -l 'v1.8.5*'
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

==== Tags creëren

Git gebruikt twee hoofdsoorten tags: lightweight (lichtgewicht) en annotated (beschreven).

Een lightweight tag komt erg overeen met een branch die niet verandert: het is slechts een wijzer naar een specifieke
 commit.

Annotated tags daarentegen, zijn als volwaardige objecten in de Git database opgeslagen.
Ze worden gechecksumd, bevatten de naam van de tagger, e-mail en datum, hebben een tag boodschap, en kunnen
 gesigneerd en geverifieerd worden met GNU Privacy Guard (GPG).
Het wordt over het algemeen aangeraden om annotated tags te maken zodat je deze informatie hebt; maar als je een
 tijdelijke tag wilt of om een of andere reden de andere informatie niet wilt houden, dan zijn er lightweight tags.

[[_annotated_tags]]
==== Annotated tags

(((tags, annotated)))(((tags, beschreven)))
Een annotated tag in Git maken is eenvoudig.
Het makkelijkste is om de `-a` optie te specificeren als je het `tag` commando uitvoert:(((git commando's, tag)))

[source,console]
----
$ git tag -a v1.4 -m 'my version 1.4'
$ git tag
v0.1
v1.3
v1.4
----

De `-m` specificeert een tag boodschap, die bij de tag opgeslagen wordt.
Als je geen boodschap voor een beschreven tag opgeeft, dan opent Git je editor zodat je deze in kunt typen.

Je kunt de tag data zien, samen met de commit die getagd was, door het `git show` commando te gebruiken:

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

Dat toont informatie over de tagger, de datum waarop de commit getagd is, en de beschrijvende boodschap alvorens de
 commit boodschap te laten zien.

==== Lichtgewicht tags

(((tags, lightweight)))(((tags, lichtgewicht)))
Een andere manier om commits te taggen zijn lichtgewicht (lightweight) tags.
Eigenlijk is dit de checksum van de commit die in een bestand opgeslagen wordt, er wordt geen enkele andere informatie bewaard.
Om een lightweight tag te maken, geef je niet de `-a`, `-s` of `-m` optie mee:

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

Dit keer, als je `git show` op de tag runt, krijg je niet de extra tag informatie te zien.(((git commando's, show)))
Het commando laat alleen de commit zien:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

==== Later taggen

Je kunt ook commits taggen als je al veel verder bent.
Stel dat je commit historie er als volgt uit ziet:

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

En stel nu dat je bent vergeten het project op v1.2 te taggen, wat bij de commit van ``updated rakefile'' was.
Je kunt dat achteraf toevoegen.
Om die commit te taggen, moet je de commit checksum (of een deel daarvan) toevoegen aan het eind van het commando:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

Je kunt zien dat je commit getagd hebt:(((git commando's, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
==== Tags delen

Standaard zal het `git push` commando geen tags naar remote servers versturen.(((git commando's, push)))
Je zult expliciet tags naar een gedeelde server moeten pushen, nadat je ze gemaakt hebt.
Dit proces is hetzelfde als remote branches delen - je kunt `git push origin [tagnaam]` uitvoeren.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

Als je veel tags hebt die je ineens wilt pushen, kun je ook de `--tags` optie aan het `git push` commando toevoegen.
Dit zal al je tags, die nog niet op de remote server zijn, in één keer er naartoe sturen.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

Als nu iemand anders van jouw repository kloont of pullt, dan zullen zij al jouw tags ook krijgen.

==== Tags uitchecken

Je kunt een tag niet echt uitchecken in Git, dit is omdat ze statisch zijn.
Als je een versie van jouw repository in jouw werkdirectory wilt zetten dat als een specifieke tag eruit ziet, kan je
 een nieuwe branch op een specifieke tag maken met `git checkout -b [branchnaam] [tagnaam]`:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

Je kunt dit natuurlijk doen en dan een commit uitvoeren, jouw `version2` branch zal een klein beetje afwijken van je
`v2.0.0` tag omdat het je met nieuwe wijzigingen mee zal bewegen, dus wees voorzichtig.