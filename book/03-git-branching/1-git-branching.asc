////
 Attentie heren en dames vertalers.

 Ik zou het volgende willen voorstellen:
 Er zijn bepaalde termen die voor de gemiddelde Nederlandse computergebruiker
 veel beter klinken (of bekender voorkomen) dan de orginele Engelse term. In het
 begin zullen deze termen niet vaak voorkomen, maar in de meer diepgaandere
 hoofdstukken komen deze steeds meer voor. Termen als "Committen", "Mergen"
 en "Applyen" klinken beter dan "Plegen" of "Toepassen", "Samenvoegen" en
 "Toepassen" (wat bovendien slecht valt te onderscheiden van de commit-toepassing).
 De mensen die dit boek lezen zijn, naar mijn bescheiden
 inschatting, al redelijk op de hoogte van versiebeheer en passen (zie ik in
 de praktijk) deze termen al toe. Een nieuwe terminologie introduceren lijkt
 me dan ook niet noodzakelijk.
 Verder blijven er altijd kreten over als "directory", wat vertaald zou kunnen
 worden als "map", maar bij het Engelse werkwoord to map krijgen we dan weer het
 probleem: hoe dit weer te vertalen? Daarom zou ik willen voorstellen om deze
 basis-termen toch onvertaald te laten.

 Twijfelgevallen zullen altijd blijven zoals de term "file", daarvan wordt in de
 praktijk zowel de term file als bestand gebruikt. Ik denk dat we hier moeten
 kijken hoe het in de context past. De term "client" heb ik, lettend op de context
 vaak vertaald met "werkstation".
 Termen als als "tool" en (ik zit zelf nog op een mooie Nederlandse term
 te broeden) "plumbing" zijn een iets grotere uitdaging, hierbij stel ik voor om
 eenmalig een Nederlandse vertaling te geven, tussen haakjes de Engelse term te
 geven en in het vervolg de Engelse term te gebruiken. Wederom is de context hier
 belangrijk.

 Verder stel ik ook voor om de regels op https://onzetaal.nl/taaladvies zoveel
 mogelijk te volgen. Bijvoorbeeld de regels omtrent het spellen van Engelse
 werkwoorden die in het Nederlands gebruikt worden.

 Let wel: ik wil niemand tot iets verplichten, maar ik denk dat we moeten
 streven naar een zo duidelijk mogelijke en best bij de praktijk aansluitende
 vertaling moeten proberen te maken.

Veel succes en plezier bij het vertalen...

Laatst bijgewerkt van progit/progit2 referentie: 6528f318
////

[[_git_branching]]
== Branchen in Git

(((branches)))
Bijna elk VCS ondersteunt een bepaalde vorm van branchen.
Branchen komt erop neer dat je een tak afsplitst van de hoofd-ontwikkellijn en daar verder mee gaat werken zonder
 aan de hoofdlijn te komen.
Bij veel VCS'en is dat nogal een duur proces, vaak wordt er een nieuwe kopie gemaakt van de directory waar je
 broncode in staat, wat lang kan duren voor grote projecten.

Sommige mensen verwijzen naar het branch model in Git als de "killer eigenschap", en het onderscheidt Git zeker in
 de VCS-gemeenschap.
Waarom is het zo bijzonder?
De manier waarop Git brancht is ongelooflijk lichtgewicht, waardoor branch operaties vrijwel instant zijn en het
 wisselen tussen de branches over het algemeen net zo snel.
In tegenstelling tot vele andere VCS's, moedigt Git juist een workflow aan waarbij vaak gebrancht en gemerged wordt,
  zelfs meerdere keren per dag.
Deze eigenschap begrijpen en de techniek beheersen geeft je een krachtig en uniek gereedschap en kan letterlijk de
 manier waarop je ontwikkelt veranderen.

include::sections/nutshell.asc[]

include::sections/basic-branching-and-merging.asc[]

include::sections/branch-management.asc[]

include::sections/workflows.asc[]

include::sections/remote-branches.asc[]

include::sections/rebasing.asc[]

=== Samenvatting

We hebben de basis van branchen en mergen in Git behandeld.
Je zou je op je gemak moeten voelen met het maken en omschakelen naar nieuwe branches, omschakelen tussen branches,
 en lokale branches te mergen.
Je zou ook in staat moeten zijn om je branches te delen door ze naar een gedeelde server te pushen, met anderen op
gedeelde branches samen te werken en je branches te rebasen voordat ze gedeeld zijn.
In het volgende deel gaan we de materie behandelen wat je nodig gaat hebben om jouw eigen Git repository-hosting
servier op te zetten.