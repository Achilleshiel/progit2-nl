=== De grondbeginselen van Git

Dus, wat is Git in een notendop?
Dit is een belangrijke paragraaf om in je op te nemen omdat, als je goed begrijpt wat Git is en de fundamenten van de
 interne werking begrijpt, het een stuk makkelijker wordt om Git effectief te gebruiken.
Probeer, als je Git aan het leren bent, te vergeten wat je al weet over andere VCSen zoals Subversion en Perforce; zo
 kan je verwarring bij gebruik door de subtiele verschillen voorkomen.
Git gaat op een hele andere manier met informatie om dan andere systemen, ook al lijken de verschillende commando's
 behoorlijk op elkaar.
Als je die verschillen begrijpt, kan je voorkomen dat je verward raakt als je Git gebruikt.

==== Momentopnames in plaats van verschillen

Een groot verschil tussen Git en elke andere VCS (inclusief Subversion en consorten) is hoe Git denkt over data.
Conceptueel bewaren de meeste andere systemen informatie als een lijst van veranderingen per bestand.
Deze systemen (CVS, Subversion, Perforce, Bazaar, enzovoort) zien de informatie die ze bewaren als een groep bestanden
en de veranderingen die aan die bestanden zijn aangebracht in de loop der tijd.

.Het bewaren van data als veranderingen aan een basisversie van elk bestand.
image::images/deltas.png[Het bewaren van data als veranderingen aan een basisversie van elk bestand.]

Git ziet en bewaart data heel anders.
De kijk van Git op data kan worden uitgelegd als een reeks momentopnames (snapshots) van een miniatuurbestandssysteem.
Elke keer dat je 'commit' (de status van je project in Git opslaat) wordt er als het ware foto van de toestand van al je
bestanden op dat moment genomen en wordt er een verwijzing naar die foto opgeslagen.
Voor efficiëntie slaat Git ongewijzigde bestanden niet elke keer opnieuw op, alleen een verwijzing naar het eerdere
 identieke bestand dat het eerder al opgeslagen had.
Git beschouwt gegevens meer als een *reeks van snapshots*.

.Het bewaren van gegevens als foto's het project gedurende de tijd.
image::images/snapshots.png[Git bewaart gegevens als foto's het project gedurende de tijd.]

Dat is een belangrijk onderscheid tussen Git en bijna alle overige VCSen.
Hierdoor moest Git bijna elk aspect van versiebeheer heroverwegen, terwijl de meeste andere systemen het hebben
 overgenomen van voorgaande generaties.
Dit maakt Git meer een soort mini-bestandssysteem met een paar ongelooflijk krachtige gereedschappen, in plaats van
 niets meer of minder dan een VCS.
We zullen een paar van de voordelen die je krijgt als je op die manier over data denkt gaan onderzoeken, als we
 'branching' (gesplitste ontwikkeling) toelichten in <<_git_branching>>.

==== Bijna alle handelingen zijn lokaal

De meeste handelingen in Git hebben alleen lokale bestanden en hulpmiddelen nodig.
Normaalgesproken is geen informatie nodig van een andere computer uit je netwerk.
Als je gewend bent aan een CVCS, waar de meeste handelingen vertraagd worden door het netwerk, lijkt Git door de goden
 van snelheid begenadigd met bovennatuurlijke krachten.
Omdat je de hele geschiedenis van het project op je lokale harde schijf hebt staan, lijken de meeste acties geen tijd in
 beslag te nemen.

Een voorbeeld: om de geschiedenis van je project te doorlopen hoeft Git niet bij een andere server de geschiedenis van
je project op te vragen; het leest simpelweg jouw lokale database.
Dat betekent dat je de geschiedenis van het project bijna direct te zien krijgt.
Als je de veranderingen wilt zien tussen de huidige versie van een bestand en de versie van een maand geleden kan Git
 het bestand van een maand geleden opzoeken en lokaal de verschillen berekenen, in plaats van aan een niet-lokale server
 te moeten vragen om het te doen, of de oudere versie van het bestand ophalen van een server om het vervolgens lokaal te
 doen.

Dit betekent ook dat er maar heel weinig is dat je niet kunt doen als je offline bent of zonder VPN zit. Als je in een
 vliegtuig of trein zit en je wilt nog even wat werken, kan je vrolijk doorgaan met commits maken tot je een
 netwerkverbinding hebt en je dat werk kunt uploaden.
Als je naar huis gaat en je VPN client niet aan de praat krijgt kan je nog steeds doorwerken.
Bij veel andere systemen is dat onmogelijk of zeer onaangenaam.
Als je bijvoorbeeld Perforce gebruikt kan je niet zo veel doen als je niet verbonden bent met de server.
Met Subversion en CVS kun je bestanden bewerken maar je kunt geen commits maken naar je database (omdat die offline is).
Dat lijkt misschien niet zo belangrijk maar je zult nog versteld staan wat een verschil het kan maken.

==== Git heeft integriteit

Alles in Git krijgt een controlegetal ('checksum') voordat het wordt opgeslagen en er wordt later met dat controlegetal
 ernaar gerefereerd.
Dat betekent dat het onmogelijk is om de inhoud van een bestand of directory te veranderen zonder dat Git er weet van heeft.
Deze functionaliteit is in het diepste deel van Git ingebouwd en staat centraal in zijn filosofie.
Je kunt geen informatie kwijtraken als het wordt verstuurd en bestanden kunnen niet corrupt raken zonder dat Git het kan
 opmerken.

Het mechanisme dat Git gebruikt voor deze controlegetallen heet een SHA-1-hash.
Dat is een tekenreeks van 40 karakters lang, bestaande uit hexadecimale tekens (0-9 en a-f) en wordt berekend uit de
 inhoud van een bestand of directory-structuur in Git.
Een SHA-1-hash ziet er als volgt zo uit:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Je zult deze hashwaarden overal tegenkomen omdat Git er zoveel gebruik van maakt.
Sterker nog, Git bewaart alles in haar database niet onder een bestandsnaam maar met de hash van de inhoud als sleutel.

==== Git voegt normaal gesproken alleen data toe

Bijna alles wat je in Git doet, leidt tot toevoeging van data in de Git database.
Het is erg moeilijk om het systeem iets te laten doen wat je niet ongedaan kan maken of het de gegevens te laten wissen
 op wat voor manier dan ook.
Zoals met elke VCS kun je veranderingen verliezen of verhaspelen als je deze nog niet hebt gecommit; maar als je dat
 eenmaal hebt gedaan, is het erg moeilijk om die data te verliezen, zeker als je de lokale database regelmatig
 uploadt ('push't) naar een andere repository.

Dit maakt het gebruik van Git zo plezierig omdat je weet dat je kunt experimenteren zonder het gevaar te lopen jezelf
 behoorlijk in de nesten te werken.
Zie <<_undoing>> voor een iets diepgaandere uitleg over hoe Git gegevens bewaart en hoe je de gegevens die verloren
 lijken kunt terughalen.

==== De drie toestanden

Let nu even goed op.
Dit is het belangrijkste wat je over Git moet weten als je wilt dat de rest van het leerproces gladjes verloopt.
Git heeft drie hoofdtoestanden waarin bestanden zich kunnen bevinden: gecommit ('commited'), aangepast
('modified') en voorbereid voor een commit ('staged').
Committed houdt in dat alle data veilig opgeslagen is in je lokale database.
Modified betekent dat je het bestand hebt gewijzigd maar dat je nog niet naar je database gecommit hebt.
Staged betekent dat je al hebt aangegeven dat de huidige versie van het aangepaste bestand in je volgende commit
 meegenomen moet worden.

Dit brengt ons tot de drie hoofdonderdelen van een Gitproject: de Git directory, de werk-directory, en de wachtrij voor
 een commit ('staging area').

.Werk-directory, wachtrij en Git directory.
image::images/areas.png["Werk-directory, wachtrij en Git directory."]

De Git directory is waar Git de metadata en objectdatabase van je project opslaat.
Dit is het belangrijkste deel van Git, deze directory wordt gekopiëerd wanneer je een repository kloont vanaf een andere
 computer.

De werk directory is een checkout van een bepaalde versie van het project.
Deze bestanden worden uit de gecomprimeerde database in de Git directory gehaald en op de harde schijf geplaatst waar
 jij ze kunt gebruiken of bewerken.

De wachtrij is een simpel bestand, dat zich normaalgesproken in je Git directory bevindt, waar informatie opgeslagen
 wordt over wat in de volgende commit meegaat.
Het wordt soms de ``index'' genoemd, maar het wordt ook vaak ook de staging area genoemd.

De algemene workflow met Git gaat ongeveer zo:

1. Je bewerkt bestanden in je werk directory.
2. Je bereidt de bestanden voor (staged), waardoor momentopnames (snapshots) worden toegevoegd aan de staging area.
3. Je maakt een commit, hierbij worden alle snapshots van de staging area verzameld en Git en bewaart die voorgoed in
 je Git directory.

Als een bepaalde versie van een bestand in de Git directory staat, wordt het beschouwd als gecommit.
Als het is aangepast, maar wel al aan de staging area is toegevoegd, is het staged.
En als het veranderd is sinds het was uitgechecked maar niet staged is, is het aangepast.
In <<_git_basics_chapter>> leer je meer over deze toestanden en hoe je er je voordeel mee kunt doen, maar ook hoe je de
 staging compleet over kunt slaan.