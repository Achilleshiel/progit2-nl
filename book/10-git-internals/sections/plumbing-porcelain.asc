[[r_plumbing_porcelain]]
=== Binnenwerk en koetswerk (plumbing and porcelain)

Dit boek behandelt hoe Git te gebruiken met ongeveer 30 werkwoorden als `checkout`, `branch`, `remote`, enzovoort.
Maar omdat Git initieel een gereedschapkist was voor een versiebeheersysteem in plaats van een compleet
 gebruikersvriendelijke versibeheersysteem, heeft het een aantal werkwoorden die het grondwerk verzorgen en die
 ontworpen zijn om op een UNIX manier te worden gekoppeld of vanuit scripts te worden aangeroepen.
Aan deze commando's worden over het algemeen gerefereerd als ``plumbing'' (binnenwerk) commando's, en de meer
 gebruikersvriendelijke commando's worden ``porcelain'' (koetswerk) genoemd.

De eerste negen hoofdstukken van het boek houden zich vrijwel exclusief bezig met porcelain commando's.
Maar in dit hoofdstuk ga je meerendeels te maken krijgen met de plumbing commando's op het diepere niveau, omdat deze
 je toegang geven tot het binnenwerk van Git, en om je te laten zien hoe en waarom Git doet wat het doet.
Veel van deze commando's zijn niet bedoeld voor handmatig gebruik op de commando-regel, maar meer bedoeld als gebruik
 als onderdeel voor nieuwe gereedschappen en eigengemaakte scripts.

Wanneer je `git init` aanroept in een nieuwe of bestaande directory, maakt Git de `.git` directory aan, waar vrijwel
 alles wat Git opslaat en bewerkt aanwezig is.
Als je een backup wilt maken of je repository wilt klonen, geeft het kopieren van deze ene directory naar elders je
 vrijwel alles wat je nodig hebt.
Deze hele hoofstuk behandelt eigenlijk het spul in deze directory.
Dit is hoe het eruit ziet:

[source,console]
----
$ ls -F1
HEAD
config*
description
hooks/
info/
objects/
refs/
----

Je kunt misschien een aantal andere bestanden hier zien, maar dit is een verse `git init` repository - het is wat je
 standaard te zien krijgt.
Het `description` bestand wordt alleen gebruikt door het GitWeb programma, dus maak je er geen zorgen over.
Het `config` bestand bevat jouw project-specifieke configuratie opties, en de `info` directory bevat een globale
 exclude bestand (((excludes))) voor genegeerde patronen die je niet wilt tracken in een .gitignore bestand.
De `hooks` directory bevat de hook-scripts voor de werkstation of server kant, waar we dieper op zijn ingegaan in
 <<ch08-customizing-git#r_git_hooks>>.

Resten vier belangrijke regels: de `HEAD` en (nog te maken) `index` bestanden, en de `objects` en `refs` directories.
Dit zijn de kern-onderdelen van Git.
De `objects` directory bevat alle inhoud voor jouw database, de `refs` directory bevat verwijzingen naar commit
 objecten in die gegevens (branches), het `HEAD` bestand verwijst naar de branch die je op dit moment uitgechecked
 hebt, en het `index` bestand is waar Git de informatie over je staging gebied bewaart.
We zullen hierna dieper ingaan op elk van deze onderdelen om te zien hoe Git werkt.
